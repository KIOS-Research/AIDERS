import os
import sys

import pytz
from django.conf import settings

OFFLINE_MAP_MODE="OFFLINE_MAP_MODE"
ONLINE_MAP_MODE="ONLINE_MAP_MODE"


NET_IP = os.environ['NET_IP']
tz = pytz.timezone('Asia/Famagusta')
CYPRUS_TIMEZONE_OBJ = tz
LOGIC_DIR =os.path.join(os.getcwd(),'logic')
PROJECT_VIRTUAL_ENVIRONMENT_PATH = 'python3'
ALGORITHMS_DIR =  os.path.join(LOGIC_DIR, 'algorithms/')
DETECT_TRACK_SCRIPT_DIRECTORY = os.path.join(LOGIC_DIR, ALGORITHMS_DIR, 'object_detection')
ROS_WORKSPACE_DIR = os.path.join(LOGIC_DIR,'djiswarmcatkinws','devel')
ROS_SETUP_BASH_PATH = os.path.join(ROS_WORKSPACE_DIR, 'setup.bash')

BASH_SCRIPTS_DIR = os.path.join(LOGIC_DIR, 'Bash_Scripts')
CONFIGS_DIR = os.path.join(DETECT_TRACK_SCRIPT_DIRECTORY, 'Configs')
RTMP_IP = '0.0.0.0'

ROS_MASTER_PORT = '11311'
ROS_MASTER_PORT_2 = '9090'

API_IP_FOR_JAVASCRIPT = NET_IP
WEBSERVER_IP_FOR_JAVASCRIPT = NET_IP
PROJECT_VIRTUAL_ENVIRONMENT_DIR = os.path.join(LOGIC_DIR, 'venvm/bin')

PROCESS_KILLED_SUCCESSFULLY = 0

PYTHON_PROCESS_NAME = b'python'
PROJECT_DIR = '/usr/src/aidersplatform'
DETECTION_CONFIG_DIR = os.path.join(PROJECT_DIR, 'django_api/logic/algorithms/object_detection/src/models/cfg/')
DETECTION_CONFIG_JSON_FILE = os.path.join(DETECTION_CONFIG_DIR, 'config.json')
OFFLINE_DEMO_MAP_TILEJSON_PATH = os.path.join(settings.STATIC_ROOT,'offline-maps','demo-map','tiles','tiles.json')
STARTER_SCRIPT_NAME = "StarterScript.py"
LOC_UPDATE_SCRIPT_NAME = 'drone_telemetry_ros_listener.py'
DETECT_TRACK_SCRIPT_NAME = 'Monitoring.py'
DRONE_API_SCRIPT_NAME = 'routes.py'
MISSION_REQUEST_HANDLER_SCRIPT_NAME = 'mission_request_handler.py'
BUILD_MAP_REQUEST_HANDLER_SCRIPT_NAME = 'build_map_request_handler.py'
IMG_GEOREFERENCE_SCRIPT_NAME = 'img_georeference.py'
FIRE_PREDICTION_SCRIPT_NAME = 'fire_prediction.py'
WEATHER_STATION_ROS_SUBSCRIBER_SCRIPT_NAME = 'weather_station_ros_subscriber.py'
WEATHER_DATA_PUBLISHER_SCRIPT_NAME = 'weather_station_ros_publisher.py'
LORA_LOCATION_RECEIVER_SCRIPT_NAME = 'lora_location_receiver.py'
WEATHER_DATA_DEVICE_SYMLINK_PATH = '/dev/weatherStation'
LORA_RECEIVER_DEVICE_SYMLINK_PATH = '/dev/loraStation'
SAFE_DRONES_CALCULATIONS_SCRIPT_NAME = 'calculations_safe_drones.py'
MESH_MONITORING_SCRIPT_NAME = 'mesh_monitoring.py'
PATH_PLANNING_SCRIPT_NAME = 'pathPlanning.py'
CAPTURE_LIVE_STREAM_NAME = 'capture_live_stream.py'

BUILD_MAP_INITIAL_STATE = -1
BUILD_MAP_STOPPED = 0
BUILD_MAP_STARTED = 1
BUILD_MAP_WANT_TO_START = 2
BUILD_MAP_WANT_TO_STOP = 3

API_PORT = '5000'
NODE_ODM_PORT = '4000'
API_URL = "http://" + NET_IP + ":" + API_PORT
NODE_ODM_API_URL = "http://" + NET_IP + ":" + NODE_ODM_PORT
CONSTANTS_API_URL = API_URL + "/constants"
WEB_SERVER_PORT = '8000'
WEB_SERVER_URL = "http://" + NET_IP + ":" + WEB_SERVER_PORT

PORT_FOR_JETSON_SOCKET = '1337'
ROS_MASTER_DISCOVERY_PORT = '11611'

INITIAL_BUILD_MAP_PORT = int(API_PORT) + 1

LIVE_STREAM_HLS_FILE_EXTENSION = ".m3u8"
LIVE_STREAM_HLS_PORT = 8080
LIVE_STREAM_HLS_URL = "http://" + NET_IP + ":" + str(LIVE_STREAM_HLS_PORT) + "/hls/"
LIVE_STREAM_RTMP_URL = 'rtmp://' + NET_IP + "/live/"

LIVE_STREAM_CONFIG = {
    "resize_to": (1280, 720) ,
    "resolution": (1920, 1080),
    "frame_rate": 30,
    "buffer_size": 10,
    "hls_uri":'rtmp://' + NET_IP + "/live/drone_id"
}



DRONE_TELEMETRY_LISTENER_SCRIPT_DIR = os.path.join(ALGORITHMS_DIR, 'telemetry_listener/')
DRONE_TELEMETRY_LISTENER_SCRIPT_PATH = os.path.join(DRONE_TELEMETRY_LISTENER_SCRIPT_DIR, LOC_UPDATE_SCRIPT_NAME)
# DETECT_TRACK_SCRIPT_DIRECTORY = '/aiders/swifters/aidersplatform/object_detection'

OBJECT_DETECTION_SRC_DIRECTORY = os.path.join(DETECT_TRACK_SCRIPT_DIRECTORY, 'src')

MESH_MONITORING_SCRIPT_DIR = os.path.join(ALGORITHMS_DIR, 'mesh_monitoring/')
SAFE_DRONES_ALGOS_DIR  = os.path.join(ALGORITHMS_DIR, 'safe_drones/')
PATH_PLANNING_SCRIPT_DIR  = os.path.join(ALGORITHMS_DIR,'path_planning/')
FIRE_PREDICTION_SCRIPT_DIR = os.path.join(ALGORITHMS_DIR, 'fire_prediction/')
CAPTURE_LIVE_STREAM_SCRIPT_DIR = os.path.join(ALGORITHMS_DIR, 'live_stream/')

MESH_MONITORING_INPUT_IMAGES_DIR = os.path.join(MESH_MONITORING_SCRIPT_DIR, 'input_images/')

MESH_MONITORING_SCRIPT_PATH = os.path.join(MESH_MONITORING_SCRIPT_DIR, MESH_MONITORING_SCRIPT_NAME)
SAFE_DRONES_CALCULATIONS_SCRIPT_PATH = os.path.join(SAFE_DRONES_ALGOS_DIR, SAFE_DRONES_CALCULATIONS_SCRIPT_NAME)
PATH_PLANNING_SCRIPT_PATH = os.path.join(PATH_PLANNING_SCRIPT_DIR,PATH_PLANNING_SCRIPT_NAME)
FIRE_PREDICTION_SCRIPT_PATH = os.path.join(FIRE_PREDICTION_SCRIPT_DIR, FIRE_PREDICTION_SCRIPT_NAME)
CAPTURE_LIVE_STREAM_SCRIPT_PATH = os.path.join(CAPTURE_LIVE_STREAM_SCRIPT_DIR, CAPTURE_LIVE_STREAM_NAME)

sys.path.insert(0, OBJECT_DETECTION_SRC_DIRECTORY)

OBJECT_DETECTION_SCRIPT_PATH = os.path.join(DETECT_TRACK_SCRIPT_DIRECTORY, DETECT_TRACK_SCRIPT_NAME)
OBJECT_DETECTION_FRAMES_DIR = os.path.join(LOGIC_DIR, DETECT_TRACK_SCRIPT_DIRECTORY, "Frames")

BUILDMAP_DRONES_API_URL = API_URL + "/buildmap/drones"
API_URL_BUILD_MAP_CURRENT_TXT_FILE_NAME = API_URL + "/buildmap/currentTxtFilePath"
API_URL_BUILD_MAP_CURRENT_SUBFOLDER_FILE_NAME = API_URL + "/buildmap/currentPhotoFolderPath"
FREQUENCY_IN_SECONDS_FOR_BUILD_MAP_THREAD = 2

DOCKER_CMD_FOR_DEBUGGING_OPENDRONEMAP = 'docker run --rm -p 4000:3000 opendronemap/nodeodm -d'




API_DIR = os.path.join(LOGIC_DIR, 'api/')
API_SCRIPT_PATH = API_DIR + DRONE_API_SCRIPT_NAME

WEBSERVER_DIR = os.path.join(LOGIC_DIR, 'webserver/')
WEBSERVER_SCRIPT_NAME = "flask_http_server.py"
WEBSERVER_SCRIPT_DIR = os.path.join(WEBSERVER_DIR, WEBSERVER_SCRIPT_NAME)

LORA_LOCATION_RECEIVER_SCRIPT_DIR = os.path.join(ALGORITHMS_DIR, 'lora_station/')
LORA_LOCATION_RECEIVER_SCRIPT_PATH = os.path.join(LORA_LOCATION_RECEIVER_SCRIPT_DIR, LORA_LOCATION_RECEIVER_SCRIPT_NAME)

# ROS_MISSION_SCRIPT_DIRECTORY = '/aiders/swifters/aidersplatform/python_LocUpdate_Script/'
MISSION_DIR = os.path.join(ALGORITHMS_DIR, 'mission/')
MISSION_REQUEST_HANDLER_SCRIPT_PATH = os.path.join(MISSION_DIR, MISSION_REQUEST_HANDLER_SCRIPT_NAME)

BUILD_MAP_DIR =  os.path.join(ALGORITHMS_DIR, 'build_map/')
BUILD_MAP_REQUEST_HANDLER_SCRIPT_PATH = os.path.join(BUILD_MAP_DIR, BUILD_MAP_REQUEST_HANDLER_SCRIPT_NAME)


BUILD_MAP_PERIODS_DIR = os.path.join(BUILD_MAP_DIR, "buildmap_periods")
build_map_directory_web_server_url = WEB_SERVER_URL + BUILD_MAP_PERIODS_DIR.replace(LOGIC_DIR, '')
BUILDMAP_PHOTO_FOLDER_NAME_PREFIX =  "buildmap_photos_"
BUILDMAP_CSV_FOLDER_NAME_PREFIX = "buildmap_csv_"
BUILDMAP_CSV_FILE_NAME_PREFIX = "buildmap_"
buildmap_metadata_csv_file_name = "metadata.csv"
buildmap_metadata_csv_header_names = ','.join(["start_time", "end_time", "drone_id", "csv_file_webserver_url", "photo_folder_webserver_url"])
METADATA_CSV_FILE_BUILDMAP_FULL_PATH =  os.path.join(BUILD_MAP_PERIODS_DIR, buildmap_metadata_csv_file_name)
FREQUENCY_FOR_BUILD_MAP_PHOTOS_IF_DRONE_IS_STILL = 0.1
in_progress_string = "IN_PROGRESS"
BOOL_START_BUILD_MAP = "true"
BOOL_STOP_BUILD_MAP = "false"

RTMP_URL_FORMAT = 'rtmp://{}:1935/live/{}'

DETECTION_FRAMES_DIR_NAME_PREFIX = "Detection_Images_"
RAW_FRAMES_DIR_NAME_PREFIX = "Raw_Frames_"
BUILD_MAP_DIR_PREFIX = "Build_Maps_"

NO_ACTIVE_DETECTION_SESSION_ERROR_MESSAGE = 'No_Active_Detection_Session'
NO_ACTIVE_LIVE_STREAM_SESSION_ERROR_MESSAGE = 'No_Active_Live_Stream_Session'

IMG_GEOREFERENCE_SCRIPT_PATH = os.path.join(BUILD_MAP_DIR, IMG_GEOREFERENCE_SCRIPT_NAME)
img_georeference_photos_csv_header_names = ','.join(["photo_id", "p1lat", "p1lon", "p2lat", "p2lon", "p3lat", "p3lon", "p4lat" , "p4lon", "alt", "bearing", "centerlat","centerlon"])


WEATHER_STATION_DIR = os.path.join(ALGORITHMS_DIR,'weather_station/')
WEATHER_STATION_ROS_SUBSCRIBER_SCRIPT_PATH = os.path.join(WEATHER_STATION_DIR, WEATHER_STATION_ROS_SUBSCRIBER_SCRIPT_NAME)
WEATHER_STATION_ROS_PUBLISHER_SCRIPT_PATH = os.path.join(WEATHER_STATION_DIR, WEATHER_DATA_PUBLISHER_SCRIPT_NAME)

MESH_RESULTS_FOLDER_DIR = os.path.join(MESH_MONITORING_SCRIPT_DIR, 'results')



START_WEATHER_DATA_PUBLISHER_SCRIPT = [PROJECT_VIRTUAL_ENVIRONMENT_PATH, WEATHER_STATION_ROS_PUBLISHER_SCRIPT_PATH, WEATHER_DATA_DEVICE_SYMLINK_PATH]
START_LORA_LOCATION_RECEIVER_SCRIPT_COMMAND = [PROJECT_VIRTUAL_ENVIRONMENT_PATH, LORA_LOCATION_RECEIVER_SCRIPT_PATH, API_URL, LORA_RECEIVER_DEVICE_SYMLINK_PATH]
START_MESH_MONITORING_SCRIPT_COMMAND = [PROJECT_VIRTUAL_ENVIRONMENT_PATH, MESH_MONITORING_SCRIPT_PATH, NODE_ODM_API_URL, NET_IP]
START_DRONE_LIVE_STREAM_CAPTURE_COMMAND = [PROJECT_VIRTUAL_ENVIRONMENT_PATH, CAPTURE_LIVE_STREAM_SCRIPT_PATH, NET_IP]
# START_MOTOR_FAILURE_SCRIPT_COMMAND = [PROJECT_VIRTUAL_ENVIRONMENT_PATH, SAFE_DRONES_CALCULATIONS_SCRIPT_PATH, API_URL, str(FROM_DOCKER)]
START = 'START'
STOP = 'STOP'


DRONES_ROUTE = '/drones/'

Mavic2Camera="Mavic_2_Enterprise_Camera"
H20TWideCamera="Zenmuse_H20T"

